From: Talat Batheesh <talatb@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/net/ethernet/mellanox/mlx5/core/en/tc_tun.c

Change-Id: Ifc7cb27a48a57f19f3d9a84401e657350654e8a5
---
 .../net/ethernet/mellanox/mlx5/core/en/tc_tun.c    | 110 +++++++++++++++++++--
 1 file changed, 104 insertions(+), 6 deletions(-)

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en/tc_tun.c b/drivers/net/ethernet/mellanox/mlx5/core/en/tc_tun.c
index xxxxxxx..xxxxxxx 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/tc_tun.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/tc_tun.c
@@ -1,6 +1,8 @@
 /* SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB */
 /* Copyright (c) 2018 Mellanox Technologies. */
 
+#ifdef HAVE_IS_TCF_TUNNEL
+
 #include <net/vxlan.h>
 #include <net/gre.h>
 #include "lib/vxlan.h"
@@ -43,7 +45,11 @@ static int get_route_and_out_devs(struct mlx5e_priv *priv,
 	/* if the egress device isn't on the same HW e-switch or
 	 * it's a LAG device, use the uplink
 	 */
+#ifdef HAVE_NETDEV_PORT_SAME_PARENT_ID
 	if (!netdev_port_same_parent_id(priv->netdev, real_dev) ||
+#else
+	if (!switchdev_port_same_parent_id(priv->netdev, real_dev) ||
+#endif
 	    dst_is_lag_dev) {
 		*route_dev = dev;
 		*out_dev = uplink_dev;
@@ -92,8 +98,11 @@ static int mlx5e_route_lookup_ipv4(struct mlx5e_priv *priv,
 	ret = PTR_ERR_OR_ZERO(rt);
 	if (ret)
 		return ret;
-
+#ifdef HAVE_RT_GW_FAMILY
 	if (mlx5_lag_is_multipath(mdev) && rt->rt_gw_family != AF_INET)
+#else
+	if (mlx5_lag_is_multipath(mdev) && !rt->rt_uses_gateway)
+#endif
 		return -ENETUNREACH;
 #else
 	return -EOPNOTSUPP;
@@ -527,8 +536,10 @@ int mlx5e_tc_tun_init_encap_attr(struct net_device *tunnel_dev,
 		int dst_port =  be16_to_cpu(e->tun_info.key.tp_dst);
 
 		if (!mlx5_vxlan_lookup_port(priv->mdev->vxlan, dst_port)) {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 			NL_SET_ERR_MSG_MOD(extack,
 					   "vxlan udp dport was not registered with the HW");
+#endif
 			netdev_warn(priv->netdev,
 				    "%d isn't an offloaded vxlan udp dport\n",
 				    dst_port);
@@ -551,10 +562,18 @@ static int mlx5e_tc_tun_parse_vxlan(struct mlx5e_priv *priv,
 				    struct mlx5_flow_spec *spec,
 				    struct tc_cls_flower_offload *f,
 				    void *headers_c,
-				    void *headers_v)
+				    void *headers_v
+#ifndef HAVE_TC_SETUP_FLOW_ACTION
+				    , struct flow_rule *rule
+#endif
+						   )
 {
+#ifdef HAVE_TC_SETUP_FLOW_ACTION
 	struct flow_rule *rule = tc_cls_flower_offload_flow_rule(f);
+#endif
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 	struct netlink_ext_ack *extack = f->common.extack;
+#endif
 	void *misc_c = MLX5_ADDR_OF(fte_match_param,
 				    spec->match_criteria,
 				    misc_parameters);
@@ -568,8 +587,10 @@ static int mlx5e_tc_tun_parse_vxlan(struct mlx5e_priv *priv,
 	/* Full udp dst port must be given */
 	if (!flow_rule_match_key(rule, FLOW_DISSECTOR_KEY_ENC_PORTS) ||
 	    memchr_inv(&enc_ports.mask->dst, 0xff, sizeof(enc_ports.mask->dst))) {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 		NL_SET_ERR_MSG_MOD(extack,
 				   "VXLAN decap filter must include enc_dst_port condition");
+#endif
 		netdev_warn(priv->netdev,
 			    "VXLAN decap filter must include enc_dst_port condition\n");
 		return -EOPNOTSUPP;
@@ -577,8 +598,10 @@ static int mlx5e_tc_tun_parse_vxlan(struct mlx5e_priv *priv,
 
 	/* udp dst port must be knonwn as a VXLAN port */
 	if (!mlx5_vxlan_lookup_port(priv->mdev->vxlan, be16_to_cpu(enc_ports.key->dst))) {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 		NL_SET_ERR_MSG_MOD(extack,
 				   "Matched UDP port is not registered as a VXLAN port");
+#endif
 		netdev_warn(priv->netdev,
 			    "UDP port %d is not registered as a VXLAN port\n",
 			    be16_to_cpu(enc_ports.key->dst));
@@ -617,17 +640,25 @@ static int mlx5e_tc_tun_parse_gretap(struct mlx5e_priv *priv,
 				     struct mlx5_flow_spec *spec,
 				     struct tc_cls_flower_offload *f,
 				     void *outer_headers_c,
-				     void *outer_headers_v)
+				     void *outer_headers_v
+#ifndef HAVE_TC_SETUP_FLOW_ACTION
+				     , struct flow_rule *rule
+#endif
+							  )
 {
 	void *misc_c = MLX5_ADDR_OF(fte_match_param, spec->match_criteria,
 				    misc_parameters);
 	void *misc_v = MLX5_ADDR_OF(fte_match_param, spec->match_value,
 				    misc_parameters);
+#ifdef HAVE_TC_SETUP_FLOW_ACTION
 	struct flow_rule *rule = tc_cls_flower_offload_flow_rule(f);
+#endif
 
 	if (!MLX5_CAP_ESW(priv->mdev, nvgre_encap_decap)) {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 		NL_SET_ERR_MSG_MOD(f->common.extack,
 				   "GRE HW offloading is not supported");
+#endif
 		netdev_warn(priv->netdev, "GRE HW offloading is not supported\n");
 		return -EOPNOTSUPP;
 	}
@@ -659,20 +690,38 @@ int mlx5e_tc_tun_parse(struct net_device *filter_dev,
 		       struct mlx5_flow_spec *spec,
 		       struct tc_cls_flower_offload *f,
 		       void *headers_c,
-		       void *headers_v, u8 *match_level)
+		       void *headers_v, u8 *match_level
+#ifndef HAVE_TC_SETUP_FLOW_ACTION
+		       , struct flow_rule *rule
+#endif
+						       )
 {
 	int tunnel_type;
 	int err = 0;
 
+#if !defined(HAVE___TC_INDR_BLOCK_CB_REGISTER) && !defined(CONFIG_COMPAT_KERNEL_4_14)
+/* in old kernels with egdev we don't pass the netdev so the filter_dev here
+ * is actually priv->netdev. we only assume and support vxlan */
+	tunnel_type = MLX5E_TC_TUNNEL_TYPE_VXLAN;
+#else
 	tunnel_type = mlx5e_tc_tun_get_type(filter_dev);
+#endif
 	if (tunnel_type == MLX5E_TC_TUNNEL_TYPE_VXLAN) {
 		*match_level = MLX5_MATCH_L4;
 		err = mlx5e_tc_tun_parse_vxlan(priv, spec, f,
-					       headers_c, headers_v);
+					       headers_c, headers_v
+#ifndef HAVE_TC_SETUP_FLOW_ACTION
+					       , rule
+#endif
+								   );
 	} else if (tunnel_type == MLX5E_TC_TUNNEL_TYPE_GRETAP) {
 		*match_level = MLX5_MATCH_L3;
 		err = mlx5e_tc_tun_parse_gretap(priv, spec, f,
-						headers_c, headers_v);
+						headers_c, headers_v
+#ifndef HAVE_TC_SETUP_FLOW_ACTION
+					        , rule
+#endif
+						      );
 	} else {
 		netdev_warn(priv->netdev,
 			    "decapsulation offload is not supported for %s (kind: \"%s\")\n",
@@ -683,3 +732,52 @@ int mlx5e_tc_tun_parse(struct net_device *filter_dev,
 	}
 	return err;
 }
+#else /* HAVE_IS_TCF_TUNNEL */
+int mlx5e_tc_tun_get_type(struct net_device *tunnel_dev)
+{
+	return -EOPNOTSUPP;
+}
+
+int mlx5e_tc_tun_create_header_ipv6(struct mlx5e_priv *priv,
+				    struct net_device *mirred_dev,
+				    struct mlx5e_encap_entry *e)
+{
+	return -EOPNOTSUPP;
+}
+
+bool mlx5e_tc_tun_device_to_offload(struct mlx5e_priv *priv,
+				    struct net_device *netdev)
+{
+	return false;
+}
+
+int mlx5e_tc_tun_parse(struct net_device *filter_dev,
+		       struct mlx5e_priv *priv,
+		       struct mlx5_flow_spec *spec,
+		       struct tc_cls_flower_offload *f,
+		       void *headers_c,
+		       void *headers_v, u8 *match_level
+#ifndef HAVE_TC_SETUP_FLOW_ACTION
+		       , struct flow_rule *rule
+#endif
+		      )
+{
+	return -EOPNOTSUPP;
+}
+
+int mlx5e_tc_tun_create_header_ipv4(struct mlx5e_priv *priv,
+				    struct net_device *mirred_dev,
+				    struct mlx5e_encap_entry *e)
+{
+	return -EOPNOTSUPP;
+}
+
+int mlx5e_tc_tun_init_encap_attr(struct net_device *tunnel_dev,
+				 struct mlx5e_priv *priv,
+				 struct mlx5e_encap_entry *e,
+				 struct netlink_ext_ack *extack)
+{
+	return -EOPNOTSUPP;
+}
+
+#endif /* HAVE_IS_TCF_TUNNEL */
