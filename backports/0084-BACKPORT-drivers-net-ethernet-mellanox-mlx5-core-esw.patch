From: Talat Batheesh <talatb@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/net/ethernet/mellanox/mlx5/core/eswitch.c

Change-Id: I241b5d0ac4d733ec5e098e1eb481ddeef3512a52
---
 drivers/net/ethernet/mellanox/mlx5/core/eswitch.c | 63 +++++++++++++++++------
 1 file changed, 46 insertions(+), 17 deletions(-)

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/eswitch.c b/drivers/net/ethernet/mellanox/mlx5/core/eswitch.c
index xxxxxxx..xxxxxxx 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/eswitch.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eswitch.c
@@ -588,6 +588,7 @@ static void update_allmulti_vports(struct mlx5_eswitch *esw,
 	u8 *mac = vaddr->node.addr;
 	struct mlx5_vport *vport;
 	u16 i, vport_num;
+	COMPAT_HL_NODE
 
 	mlx5_esw_for_all_vports(esw, i, vport) {
 		struct hlist_head *vport_hash = vport->mc_list;
@@ -635,6 +636,7 @@ static int esw_add_mc_addr(struct mlx5_eswitch *esw, struct vport_addr *vaddr)
 	struct esw_mc_addr *esw_mc;
 	u8 *mac = vaddr->node.addr;
 	u16 vport = vaddr->vport;
+	COMPAT_HL_NODE
 
 	if (!esw->fdb_table.legacy.fdb)
 		return 0;
@@ -675,6 +677,7 @@ static int esw_del_mc_addr(struct mlx5_eswitch *esw, struct vport_addr *vaddr)
 	struct esw_mc_addr *esw_mc;
 	u8 *mac = vaddr->node.addr;
 	u16 vport = vaddr->vport;
+	COMPAT_HL_NODE
 
 	if (!esw->fdb_table.legacy.fdb)
 		return 0;
@@ -725,6 +728,7 @@ static void esw_apply_vport_addr_list(struct mlx5_eswitch *esw,
 	struct hlist_head *hash;
 	struct hlist_node *tmp;
 	int hi;
+	COMPAT_HL_NODE
 
 	vport_addr_add = is_uc ? esw_add_uc_addr :
 				 esw_add_mc_addr;
@@ -761,6 +765,7 @@ static void esw_update_vport_addr_list(struct mlx5_eswitch *esw,
 	int err;
 	int hi;
 	int i;
+	COMPAT_HL_NODE
 
 	size = is_uc ? MLX5_MAX_UC_PER_VPORT(esw->dev) :
 		       MLX5_MAX_MC_PER_VPORT(esw->dev);
@@ -882,6 +887,7 @@ static void esw_update_vport_mc_promisc(struct mlx5_eswitch *esw,
 	struct hlist_head *hash;
 	struct hlist_node *tmp;
 	int hi;
+	COMPAT_HL_NODE
 
 	hash = vport->mc_list;
 
@@ -2473,10 +2479,14 @@ int mlx5_eswitch_init(struct mlx5_core_dev *dev)
 	if (err)
 		goto abort;
 
+#ifdef HAVE_TCF_TUNNEL_INFO
 	mutex_init(&esw->offloads.encap_tbl_lock);
 	hash_init(esw->offloads.encap_tbl);
+#endif
+#ifdef HAVE_TCF_PEDIT_TCFP_KEYS_EX
 	mutex_init(&esw->offloads.mod_hdr.lock);
 	hash_init(esw->offloads.mod_hdr.hlist);
+#endif
 	atomic64_set(&esw->offloads.num_flows, 0);
 	mutex_init(&esw->state_lock);
 
@@ -2577,8 +2587,10 @@ void mlx5_eswitch_cleanup(struct mlx5_eswitch *esw)
 	flush_work(&esw->handler.stop_handler);
 	destroy_workqueue(esw->work_queue);
 	esw_offloads_cleanup_reps(esw);
+#ifdef HAVE_TCF_PEDIT_TCFP_KEYS_EX
 	mutex_destroy(&esw->offloads.mod_hdr.lock);
 	mutex_destroy(&esw->offloads.encap_tbl_lock);
+#endif
 	kfree(esw->vports);
 	kfree(esw);
 }
@@ -2766,6 +2778,7 @@ unlock:
 	return 0;
 }
 
+#ifdef HAVE_IFLA_VF_INFO
 int mlx5_eswitch_get_vport_config(struct mlx5_eswitch *esw,
 				  u16 vport, struct ifla_vf_info *ivi)
 {
@@ -2779,18 +2792,31 @@ int mlx5_eswitch_get_vport_config(struct mlx5_eswitch *esw,
 
 	mutex_lock(&esw->state_lock);
 	ether_addr_copy(ivi->mac, evport->info.mac);
-	ivi->linkstate = evport->info.link_state;
-	ivi->vlan = evport->info.vlan;
-	ivi->qos = evport->info.qos;
-	ivi->vlan_proto = evport->info.vlan_proto;
-	ivi->spoofchk = evport->info.spoofchk;
-	ivi->trusted = evport->info.trusted;
-	ivi->min_tx_rate = evport->info.min_rate;
-	ivi->max_tx_rate = evport->info.max_rate;
-	mutex_unlock(&esw->state_lock);
+#ifdef HAVE_LINKSTATE
+       ivi->linkstate = evport->info.link_state;
+#endif
+       ivi->vlan = evport->info.vlan;
+       ivi->qos = evport->info.qos;
+#ifdef HAVE_VF_VLAN_PROTO
+       ivi->vlan_proto = evport->info.vlan_proto;
+#endif
+#ifdef HAVE_VF_INFO_SPOOFCHK
+       ivi->spoofchk = evport->info.spoofchk;
+#endif
+#ifdef HAVE_VF_INFO_TRUST
+       ivi->trusted = evport->info.trusted;
+#endif
+#ifdef HAVE_VF_TX_RATE_LIMITS
+       ivi->min_tx_rate = evport->info.min_rate;
+       ivi->max_tx_rate = evport->info.max_rate;
+#else
+	ivi->tx_rate = evport->info.max_rate;
+#endif
+       mutex_unlock(&esw->state_lock);
 
-	return 0;
+       return 0;
 }
+#endif
 
 int __mlx5_eswitch_set_vport_vlan(struct mlx5_eswitch *esw, int vport, u16 vlan,
 				  u8 qos, __be16 proto, u8 set_flags)
@@ -3133,6 +3159,7 @@ int mlx5_eswitch_set_vport_rate(struct mlx5_eswitch *esw, u16 vport,
 	bool min_rate_supported;
 	bool max_rate_supported;
 	int err = 0;
+	u32 act_max_rate = max_rate;
 
 	if (!ESW_ALLOWED(esw))
 		return -EPERM;
@@ -3143,7 +3170,6 @@ int mlx5_eswitch_set_vport_rate(struct mlx5_eswitch *esw, u16 vport,
 	min_rate_supported = MLX5_CAP_QOS(esw->dev, esw_bw_share) &&
 				fw_max_bw_share >= MLX5_MIN_BW_SHARE;
 	max_rate_supported = MLX5_CAP_QOS(esw->dev, esw_rate_limit);
-	u32 act_max_rate = max_rate;
 
 	if ((min_rate && !min_rate_supported) || (max_rate && !max_rate_supported))
 		return -EOPNOTSUPP;
@@ -3428,7 +3454,9 @@ int mlx5_eswitch_get_vport_stats(struct mlx5_eswitch *esw,
 	struct mlx5_vport *vport = mlx5_eswitch_get_vport(esw, vport_num);
 	int outlen = MLX5_ST_SZ_BYTES(query_vport_counter_out);
 	u32 in[MLX5_ST_SZ_DW(query_vport_counter_in)] = {0};
+#ifdef HAVE_STRUCT_IFLA_VF_STATS_RX_TX_DROPPED
 	struct mlx5_vport_drop_stats stats = {0};
+#endif
 	int err = 0;
 	u32 *out;
 
@@ -3492,11 +3520,13 @@ int mlx5_eswitch_get_vport_stats(struct mlx5_eswitch *esw,
 	vf_stats->broadcast =
 		MLX5_GET_CTR(out, received_eth_broadcast.packets);
 
-	err = mlx5_eswitch_query_vport_drop_stats(esw->dev, vport, &stats);
-	if (err)
-		goto free_out;
-	vf_stats->rx_dropped = stats.rx_dropped;
-	vf_stats->tx_dropped = stats.tx_dropped;
+#ifdef HAVE_STRUCT_IFLA_VF_STATS_RX_TX_DROPPED
+       err = mlx5_eswitch_query_vport_drop_stats(esw->dev, vport, &stats);
+       if (err)
+       	goto free_out;
+       vf_stats->rx_dropped = stats.rx_dropped;
+       vf_stats->tx_dropped = stats.tx_dropped;
+#endif
 #ifdef HAVE_STRUCT_IFLA_VF_STATS_TX_BROADCAST
 	vf_stats->tx_multicast =
 		MLX5_GET_CTR(out, transmitted_eth_multicast.packets) +
@@ -3519,7 +3549,6 @@ int mlx5_eswitch_get_vport_stats_backport(struct mlx5_eswitch *esw,
 	int outlen = MLX5_ST_SZ_BYTES(query_vport_counter_out);
 	u32 in[MLX5_ST_SZ_DW(query_vport_counter_in)] = {0};
 	int err = 0;
-	bool vst_mode_steering;
 	u32 *out;
 
 	if (!ESW_ALLOWED(esw))
