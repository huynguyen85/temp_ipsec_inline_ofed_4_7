From: Talat Batheesh <talatb@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/infiniband/core/device.c

Change-Id: I8d810fb71e2704f5f751d860e4f450c87a49fd5d
---
 drivers/infiniband/core/device.c | 171 +++++++++++++++++++++++++++++++++++----
 1 file changed, 157 insertions(+), 14 deletions(-)

diff --git a/drivers/infiniband/core/device.c b/drivers/infiniband/core/device.c
index xxxxxxx..xxxxxxx 100644
--- a/drivers/infiniband/core/device.c
+++ b/drivers/infiniband/core/device.c
@@ -53,6 +53,9 @@
 MODULE_AUTHOR("Roland Dreier");
 MODULE_DESCRIPTION("core kernel InfiniBand API");
 MODULE_LICENSE("Dual BSD/GPL");
+#ifdef RETPOLINE_MLNX
+MODULE_INFO(retpoline, "Y");
+#endif
 
 struct workqueue_struct *ib_comp_wq;
 struct workqueue_struct *ib_comp_unbound_wq;
@@ -182,11 +185,17 @@ static DECLARE_HASHTABLE(ndev_hash, 5);
 static void free_netdevs(struct ib_device *ib_dev);
 static void ib_unregister_work(struct work_struct *work);
 static void __ib_unregister_device(struct ib_device *device);
+#ifdef HAVE_REGISTER_LSM_NOTIFIER
 static int ib_security_change(struct notifier_block *nb, unsigned long event,
 			      void *lsm_data);
 static void ib_policy_change_task(struct work_struct *work);
 static DECLARE_WORK(ib_policy_change_work, ib_policy_change_task);
 
+static struct notifier_block ibdev_lsm_nb = {
+	.notifier_call = ib_security_change,
+};
+#endif
+
 static void __ibdev_printk(const char *level, const struct ib_device *ibdev,
 			   struct va_format *vaf)
 {
@@ -247,9 +256,6 @@ define_ibdev_printk_level(ibdev_warn, KERN_WARNING);
 define_ibdev_printk_level(ibdev_notice, KERN_NOTICE);
 define_ibdev_printk_level(ibdev_info, KERN_INFO);
 
-static struct notifier_block ibdev_lsm_nb = {
-	.notifier_call = ib_security_change,
-};
 
 static int rdma_dev_change_netns(struct ib_device *device, struct net *cur_net,
 				 struct net *net);
@@ -443,17 +449,28 @@ static int alloc_name(struct ib_device *ibdev, const char *name)
 {
 	struct ib_device *device;
 	unsigned long index;
+	int i;
+#ifdef HAVE_IDA_ALLOC
 	struct ida inuse;
 	int rc;
-	int i;
+#else
+	unsigned long *inuse;
+
+	inuse = (unsigned long *) get_zeroed_page(GFP_KERNEL);
+	if (!inuse)
+		return -ENOMEM;
+#endif
 
 	lockdep_assert_held_exclusive(&devices_rwsem);
+#ifdef HAVE_IDA_ALLOC
 	ida_init(&inuse);
+#endif
 	xa_for_each (&devices, index, device) {
 		char buf[IB_DEVICE_NAME_MAX];
 
 		if (sscanf(dev_name(&device->dev), name, &i) != 1)
 			continue;
+#ifdef HAVE_IDA_ALLOC
 		if (i < 0 || i >= INT_MAX)
 			continue;
 		snprintf(buf, sizeof buf, name, i);
@@ -473,6 +490,17 @@ static int alloc_name(struct ib_device *ibdev, const char *name)
 out:
 	ida_destroy(&inuse);
 	return rc;
+#else
+	if (i < 0 || i >= PAGE_SIZE * 8)
+		continue;
+	snprintf(buf, sizeof buf, name, i);
+	if (!strcmp(buf, dev_name(&device->dev)))
+		set_bit(i, inuse);
+	}
+	i = find_first_zero_bit(inuse, PAGE_SIZE * 8);
+	free_page((unsigned long) inuse);
+	return dev_set_name(&ibdev->dev, name, i);
+#endif
 }
 
 static void ib_device_release(struct device *device)
@@ -788,6 +816,7 @@ void ib_get_device_fw_str(struct ib_device *dev, char *str)
 }
 EXPORT_SYMBOL(ib_get_device_fw_str);
 
+#ifdef HAVE_REGISTER_LSM_NOTIFIER
 static void ib_policy_change_task(struct work_struct *work)
 {
 	struct ib_device *dev;
@@ -824,6 +853,7 @@ static int ib_security_change(struct notifier_block *nb, unsigned long event,
 
 	return NOTIFY_OK;
 }
+#endif /* HAVE_REGISTER_LSM_NOTIFIER */
 
 static void compatdev_release(struct device *dev)
 {
@@ -1145,6 +1175,7 @@ out:
 
 static void setup_dma_device(struct ib_device *device)
 {
+#ifdef HAVE_DEVICE_DMA_OPS
 	struct device *parent = device->dev.parent;
 
 	WARN_ON_ONCE(device->dma_device);
@@ -1176,6 +1207,15 @@ static void setup_dma_device(struct ib_device *device)
 		WARN_ON_ONCE(!parent);
 		device->dma_device = parent;
 	}
+#else /* HAVE_DEVICE_DMA_OPS */
+	WARN_ON_ONCE(!device->dev.parent && !device->dma_device);
+	WARN_ON_ONCE(device->dev.parent && device->dma_device
+		     && device->dev.parent != device->dma_device);
+	if (!device->dev.parent)
+		device->dev.parent = device->dma_device;
+	if (!device->dma_device)
+		device->dma_device = device->dev.parent;
+#endif /* HAVE_DEVICE_DMA_OPS */
 	/* Setup default max segment size for all IB devices */
 	dma_set_max_seg_size(device->dma_device, SZ_2G);
 
@@ -1307,6 +1347,10 @@ int ib_register_device(struct ib_device *device, const char *name)
 	if (ret)
 		return ret;
 
+#if !defined(HAVE_VLAN_DEV_GET_EGRESS_QOS_MASK)
+	mutex_init(&device->skprio2up.lock);
+#endif
+
 	ret = setup_device(device);
 	if (ret)
 		return ret;
@@ -1318,8 +1362,9 @@ int ib_register_device(struct ib_device *device, const char *name)
 		return ret;
 	}
 
+#ifdef HAVE_CGROUP_RDMA_H
 	ib_device_register_rdmacg(device);
-
+#endif
 	rdma_counter_init(device);
 
 	/*
@@ -1383,7 +1428,9 @@ dev_cleanup:
 	device_del(&device->dev);
 cg_cleanup:
 	dev_set_uevent_suppress(&device->dev, false);
+#ifdef HAVE_CGROUP_RDMA_H
 	ib_device_unregister_rdmacg(device);
+#endif
 	ib_cache_cleanup_one(device);
 	return ret;
 }
@@ -2269,6 +2316,46 @@ int ib_find_gid(struct ib_device *device, union ib_gid *gid,
 }
 EXPORT_SYMBOL(ib_find_gid);
 
+#if !defined(HAVE_VLAN_DEV_GET_EGRESS_QOS_MASK)
+int ib_set_skprio2up(struct ib_device *device,
+		     u8 port_num, u8 prio, u8 up)
+{
+	if (prio >= NUM_SKPRIO ||
+	    up >= NUM_UP ||
+	    port_num > MAX_PORTS || port_num == 0)
+		return -EINVAL;
+
+	if (rdma_port_get_link_layer(device, port_num) !=
+			IB_LINK_LAYER_ETHERNET)
+		return -ENOTSUPP;
+
+	mutex_lock(&device->skprio2up.lock);
+	device->skprio2up.map[port_num - 1][prio] = up;
+	mutex_unlock(&device->skprio2up.lock);
+	return 0;
+}
+EXPORT_SYMBOL(ib_set_skprio2up);
+
+int ib_get_skprio2up(struct ib_device *device,
+		     u8 port_num, u8 prio, u8 *up)
+{
+	if (prio >= NUM_SKPRIO ||
+	    !up ||
+	    port_num > MAX_PORTS || port_num == 0)
+		return -EINVAL;
+
+	if (rdma_port_get_link_layer(device, port_num) !=
+			IB_LINK_LAYER_ETHERNET)
+		return -ENOTSUPP;
+
+	mutex_lock(&device->skprio2up.lock);
+	*up = device->skprio2up.map[port_num - 1][prio];
+	mutex_unlock(&device->skprio2up.lock);
+	return 0;
+}
+EXPORT_SYMBOL(ib_get_skprio2up);
+#endif
+
 /**
  * ib_find_pkey - Returns the PKey table index where a specified
  *   PKey value occurs.
@@ -2502,11 +2589,19 @@ static const struct rdma_nl_cbs ibnl_ls_cb_table[RDMA_NL_LS_NUM_OPS] = {
 		.flags = RDMA_NL_ADMIN_PERM,
 	},
 	[RDMA_NL_LS_OP_SET_TIMEOUT] = {
+#ifdef HAVE_NETLINK_EXT_ACK
 		.doit = ib_nl_handle_set_timeout,
+#else
+		.dump = ib_nl_handle_set_timeout,
+#endif
 		.flags = RDMA_NL_ADMIN_PERM,
 	},
 	[RDMA_NL_LS_OP_IP_RESOLVE] = {
+#ifdef HAVE_NETLINK_EXT_ACK
 		.doit = ib_nl_handle_ip_res_resp,
+#else
+		.dump = ib_nl_handle_ip_res_resp,
+#endif
 		.flags = RDMA_NL_ADMIN_PERM,
 	},
 };
@@ -2519,17 +2614,62 @@ static int __init ib_core_init(void)
 	if (!ib_wq)
 		return -ENOMEM;
 
+#if defined(HAVE_ALLOC_WORKQUEUE)
 	ib_comp_wq = alloc_workqueue("ib-comp-wq",
-			WQ_HIGHPRI | WQ_MEM_RECLAIM | WQ_SYSFS, 0);
+			0
+#if defined(HAVE_WQ_HIGHPRI)
+			| WQ_HIGHPRI
+#endif
+#if defined(HAVE_WQ_MEM_RECLAIM)
+			| WQ_MEM_RECLAIM
+#endif
+#if defined(HAVE_WQ_SYSFS)
+			| WQ_SYSFS
+#endif
+#if defined(HAVE_WQ_NON_REENTRANT)
+			| WQ_NON_REENTRANT
+#endif
+			, 0);
+#else /* HAVE_ALLOC_WORKQUEUE */
+	/* For older kernels that do not have WQ_NON_REENTRANT and
+	 * alloc_workqueue
+	 */
+	ib_comp_wq = create_singlethread_workqueue("ib-comp-wq");
+#endif /* HAVE_ALLOC_WORKQUEUE */
 	if (!ib_comp_wq) {
 		ret = -ENOMEM;
 		goto err;
 	}
 
+#if defined(HAVE_ALLOC_WORKQUEUE)
 	ib_comp_unbound_wq =
 		alloc_workqueue("ib-comp-unb-wq",
-				WQ_UNBOUND | WQ_HIGHPRI | WQ_MEM_RECLAIM |
-				WQ_SYSFS, WQ_UNBOUND_MAX_ACTIVE);
+			0
+#if defined(HAVE_WQ_UNBOUND)
+			| WQ_UNBOUND
+#endif
+#if defined(HAVE_WQ_HIGHPRI)
+			| WQ_HIGHPRI
+#endif
+#if defined(HAVE_WQ_MEM_RECLAIM)
+			| WQ_MEM_RECLAIM
+#endif
+#if defined(HAVE_WQ_SYSFS)
+			| WQ_SYSFS
+#endif
+#if defined(HAVE_WQ_NON_REENTRANT)
+			| WQ_NON_REENTRANT
+#endif
+#if defined(HAVE_WQ_UNBOUND) && defined(HAVE_WQ_UNBOUND_MAX_ACTIVE)
+			, WQ_UNBOUND_MAX_ACTIVE);
+#else
+			, 0);
+#endif
+#else /* HAVE_ALLOC_WORKQUEUE */
+	/* For older kernels that do not have alloc_workqueue
+	 */
+	ib_comp_unbound_wq = create_singlethread_workqueue("ib-comp-unb-wq");
+#endif /* HAVE_ALLOC_WORKQUEUE */
 	if (!ib_comp_unbound_wq) {
 		ret = -ENOMEM;
 		goto err_comp;
@@ -2559,12 +2699,13 @@ static int __init ib_core_init(void)
 		goto err_mad;
 	}
 
-	ret = register_lsm_notifier(&ibdev_lsm_nb);
-	if (ret) {
-		pr_warn("Couldn't register LSM notifier. ret %d\n", ret);
-		goto err_sa;
-	}
-
+#ifdef HAVE_REGISTER_LSM_NOTIFIER
+       ret = register_lsm_notifier(&ibdev_lsm_nb);
+       if (ret) {
+       	pr_warn("Couldn't register LSM notifier. ret %d\n", ret);
+       	goto err_sa;
+       }
+#endif
 	ret = register_pernet_device(&rdma_dev_net_ops);
 	if (ret) {
 		pr_warn("Couldn't init compat dev. ret %d\n", ret);
@@ -2578,9 +2719,11 @@ static int __init ib_core_init(void)
 	return 0;
 
 err_compat:
+#ifdef HAVE_REGISTER_LSM_NOTIFIER
 	unregister_lsm_notifier(&ibdev_lsm_nb);
 err_sa:
 	ib_sa_cleanup();
+#endif
 err_mad:
 	ib_mad_cleanup();
 err_addr:
