From: Talat Batheesh <talatb@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/infiniband/core/uverbs_cmd.c

Change-Id: I959fe246f6139ba81ce97a3beae67caf9e4922bb
---
 drivers/infiniband/core/uverbs_cmd.c | 44 ++++++++++++++++++++++++++++++++++--
 1 file changed, 42 insertions(+), 2 deletions(-)

diff --git a/drivers/infiniband/core/uverbs_cmd.c b/drivers/infiniband/core/uverbs_cmd.c
index xxxxxxx..xxxxxxx 100644
--- a/drivers/infiniband/core/uverbs_cmd.c
+++ b/drivers/infiniband/core/uverbs_cmd.c
@@ -219,7 +219,9 @@ static int ib_uverbs_get_context(struct uverbs_attr_bundle *attrs)
 	struct ib_uverbs_get_context_resp resp;
 	struct ib_ucontext		 *ucontext;
 	struct file			 *filp;
-	struct ib_rdmacg_object		 cg_obj;
+#ifdef HAVE_CGROUP_RDMA_H
+       struct ib_rdmacg_object		 cg_obj;
+#endif
 	struct ib_device *ib_dev;
 	int ret;
 
@@ -240,10 +242,11 @@ static int ib_uverbs_get_context(struct uverbs_attr_bundle *attrs)
 		goto err;
 	}
 
+#ifdef HAVE_CGROUP_RDMA_H
 	ret = ib_rdmacg_try_charge(&cg_obj, ib_dev, RDMACG_RESOURCE_HCA_HANDLE);
 	if (ret)
 		goto err;
-
+#endif
 	ucontext = rdma_zalloc_drv_obj(ib_dev, ib_ucontext);
 	if (!ucontext) {
 		ret = -ENOMEM;
@@ -254,7 +257,9 @@ static int ib_uverbs_get_context(struct uverbs_attr_bundle *attrs)
 
 	ucontext->res.type = RDMA_RESTRACK_CTX;
 	ucontext->device = ib_dev;
+#ifdef HAVE_CGROUP_RDMA_H
 	ucontext->cg_obj = cg_obj;
+#endif
 	/* ufile is required when some objects are released */
 	ucontext->ufile = file;
 
@@ -297,7 +302,12 @@ static int ib_uverbs_get_context(struct uverbs_attr_bundle *attrs)
 	 * Make sure that ib_uverbs_get_ucontext() sees the pointer update
 	 * only after all writes to setup the ucontext have completed
 	 */
+#ifdef HAVE_SMP_LOAD_ACQUIRE
 	smp_store_release(&file->ucontext, ucontext);
+#else
+	smp_wmb();
+	file->ucontext = ucontext;
+#endif
 
 	mutex_unlock(&file->ucontext_lock);
 
@@ -314,8 +324,10 @@ err_free:
 	kfree(ucontext);
 
 err_alloc:
+#ifdef HAVE_CGROUP_RDMA_H
 	ib_rdmacg_uncharge(&cg_obj, ib_dev, RDMACG_RESOURCE_HCA_HANDLE);
 
+#endif
 err:
 	mutex_unlock(&file->ucontext_lock);
 	return ret;
@@ -576,7 +588,11 @@ static int ib_uverbs_open_xrcd(struct uverbs_attr_bundle *attrs)
 	struct ib_uverbs_open_xrcd_resp	resp;
 	struct ib_uxrcd_object         *obj;
 	struct ib_xrcd                 *xrcd = NULL;
+#ifdef HAVE_FDGET
 	struct fd			f = {NULL, 0};
+#else
+	struct file                    *f = NULL;
+#endif
 	struct inode                   *inode = NULL;
 	int				ret = 0;
 	int				new_xrcd = 0;
@@ -589,6 +605,7 @@ static int ib_uverbs_open_xrcd(struct uverbs_attr_bundle *attrs)
 	mutex_lock(&ibudev->xrcd_tree_mutex);
 
 	if (cmd.fd != -1) {
+#ifdef HAVE_FDGET
 		/* search for file descriptor */
 		f = fdget(cmd.fd);
 		if (!f.file) {
@@ -597,6 +614,19 @@ static int ib_uverbs_open_xrcd(struct uverbs_attr_bundle *attrs)
 		}
 
 		inode = file_inode(f.file);
+#else
+		f = fget(cmd.fd);
+		if (!f) {
+			ret = -EBADF;
+			goto err_tree_mutex_unlock;
+		}
+
+		inode = f->f_dentry->d_inode;
+		if (!inode) {
+			ret = -EBADF;
+			goto err_tree_mutex_unlock;
+		}
+#endif
 		xrcd = find_xrcd(ibudev, inode);
 		if (!xrcd && !(cmd.oflags & O_CREAT)) {
 			/* no file descriptor. Need CREATE flag */
@@ -651,8 +681,13 @@ static int ib_uverbs_open_xrcd(struct uverbs_attr_bundle *attrs)
 	if (ret)
 		goto err_copy;
 
+#ifdef HAVE_FDGET
 	if (f.file)
 		fdput(f);
+#else
+	if (f)
+		fput(f);
+#endif
 
 	mutex_unlock(&ibudev->xrcd_tree_mutex);
 
@@ -672,8 +707,13 @@ err:
 	uobj_alloc_abort(&obj->uobject, attrs);
 
 err_tree_mutex_unlock:
+#ifdef HAVE_FDGET
 	if (f.file)
 		fdput(f);
+#else
+	if (f)
+		fput(f);
+#endif
 
 	mutex_unlock(&ibudev->xrcd_tree_mutex);
 
